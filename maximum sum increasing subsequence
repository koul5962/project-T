// CPP program to find maximum sum increasing
// subsequence till i-th index and including
// k-th index.
#include <bits/stdc++.h>
#define ll long long int
using namespace std;

ll pre_compute(ll a[], ll n, ll index, ll k)
{
	ll dp[n][n] = { 0 };

	// Initializing the first row of the dp[][].
	for (int i = 0; i < n; i++) {
		if (a[i] > a[0]) 
			dp[0][i] = a[i] + a[0];	 
		else
			dp[0][i] = a[i];	 
	}

	// Creating the dp[][] matrix.
	for (int i = 1; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (a[j] > a[i] && j > i) {
				if (dp[i - 1][i] + a[j] > dp[i - 1][j]) 
					dp[i][j] = dp[i - 1][i] + a[j];			 
				else
					dp[i][j] = dp[i - 1][j];
			}
			else
				dp[i][j] = dp[i - 1][j];		 
		}
	}

	// To calculate for i=4 and k=6.
	return dp[index][k];
}

int main()
{
	ll a[] = { 1, 101, 2, 3, 100, 4, 5 };
	ll n = sizeof(a) / sizeof(a[0]);
	ll index = 4, k = 6;
	printf("%lld", pre_compute(a, n, index, k));
	return 0;
}
